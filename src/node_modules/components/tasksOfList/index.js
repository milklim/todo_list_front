import React, {Component} from 'react'
import {connect} from 'react-redux'
import classNames from 'classnames/bind'

import EditTask from 'components/editTask'

import {
    fetchListTasks,
    deleteTask,
    toggleDoneStatus,
    taskPositionUp,
    taskPositionDown,
    onEditTaskStart
} from 'actions'

import {
    getTasksOfList,
    getEditingTask,
} from "selectors";


class TasksOfList extends Component {
    constructor(props) {
        super(props)
        this.state = {isDone: false}
        this.state = {isEditing: false}
    }

    componentDidMount () {
        this.props.fetchListTasks(this.props.listId) //param
    }

    deleteTask = (id) => this.props.deleteTask(id)
    changeDoneStatus = (id) => this.props.toggleDoneStatus(id)
    moveUp = (taskId, position) => (this.props.tasks.length > 1 && position > 1) ? this.props.taskPositionUp(taskId) : null
    moveDown = (taskId, position) => (this.props.tasks.length > 1 && position < this.props.tasks.length) ? this.props.taskPositionDown(taskId) : null
    editTask = (task) => {
        this.props.onEditTaskStart(task)
        this.setState({'isEditing': true})
    }


    renderTask(task){
        const {editingTask} = this.props

        let editField = null
        if (this.state.isEditing) {
            editField =
                    <input className="w3-input w3-border editField"
                           autoFocus={true}
                           type="text"
                           defaultValue={task.content}
                    />
        }
        let renderContent = (this.state.isEditing && editingTask.id === task.id) ? editField : task.content

        return(
            <div className="w3-row w3-border-left w3-border-right w3-border-bottom task-item" key={task.id}>
                <div className="w3-display-container w3-col w3-border-right done-checkbox" >
                    <input
                        type="checkbox"
                        className="w3-check w3-display-middle"
                        defaultChecked={task.is_done}
                        onChange={this.changeDoneStatus.bind(this, task.id)}
                    />
                </div>
                <div className="w3-col w3-right task-edit-btns">
                    <div className="w3-row">
                        <div className="w3-third w3-border-right w3-padding">
                            <div className="arrow-up" onClick={this.moveUp.bind(this, task.id, task.position)}></div>
                            <div className="arrow-down" onClick={this.moveDown.bind(this, task.id, task.position)}></div>
                        </div>
                        <div className="w3-third w3-padding">
                            <i className="fa fa-pencil w3-hover-text-black"
                               onClick={this.editTask.bind(this, task)}
                            ></i>
                        </div>
                        <div className="w3-third w3-border-left w3-padding">
                            <i className="fa fa-trash-o w3-hover-text-red" onClick={this.deleteTask.bind(this, task.id)}></i>
                        </div>
                    </div>
                </div>
                <div className="w3-rest w3-padding-16 w3-border-left w3-border-right task-content"
                     onDoubleClick={this.editTask.bind(this, task)}
                >
                    <span className = {classNames({'line-through-text': task.is_done && editingTask.id !== task.id})}>
                        {renderContent}
                    </span>

                    {/*<span className = {classNames({*/}
                            {/*'line-through-text': task.is_done,*/}
                             {/*'hide': this.state.isEditing && editingTask.id === task.id})*/}
                    {/*}>*/}
                        {/*{task.content}*/}
                    {/*</span>*/}
                    {/*<div className="w3-display-container">*/}
                        {/*{editField}*/}
                    {/*</div>*/}


                </div>
            </div>
        )
    }

    render() {
        const {tasks} = this.props

        return (
            <div>
                {tasks.map((task) => this.renderTask(task))}
            </div>
        )
    }
}


const mapStateToProps = (state, ownProps) => {
    return {
        tasks: getTasksOfList(state, ownProps.listId),
        editingTask: getEditingTask(state)
    }
}

const mapDispatchToProps = {
    fetchListTasks,
    deleteTask,
    toggleDoneStatus,
    taskPositionUp,
    taskPositionDown,
    onEditTaskStart
}

export default connect(mapStateToProps, mapDispatchToProps)(TasksOfList)